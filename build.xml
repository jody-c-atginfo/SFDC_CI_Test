<project name="CPQ Dev to Int Dev sandboxes" default="retrieve" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>
    <property environment="env"/>

    <!-- Setting default value for username, password and session id properties to empty string 
         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
         will be treated literally.
    -->
    <condition property="sf.username.from" value=""> <not> <isset property="sf.username.from"/> </not> </condition>
    <condition property="sf.password.from" value=""> <not> <isset property="sf.password.from"/> </not> </condition>
    <condition property="sf.username.to" value=""> <not> <isset property="sf.username.to"/> </not> </condition>
    <condition property="sf.password.to" value=""> <not> <isset property="sf.password.to"/> </not> </condition>

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="lib/ant-salesforce.jar" />        	
            <pathelement location="lib/io-core-25.jar" />        	
        </classpath>
    </taskdef>
	
    <!-- Full retrieve and deploy target -->
    <target name="FullMove">
	  <!-- clean all directories -->
	  <antcall target="CleanAll"/>
	  <!-- build package.xml -->
	  <antcall target="retrieve.all.content"/>
      <!-- Retrieve the contents of the source org -->
      <antcall target="retrieveFromUnpackaged0"/>
      <antcall target="retrieveFromUnpackaged1"/>
      <antcall target="retrieveFromUnpackaged2"/>
      <antcall target="retrieveFromUnpackaged3"/>
      <antcall target="retrieveFromUnpackaged4"/>
      <antcall target="retrieveFromUnpackaged5"/>
      <!--<antcall target="retrieveFromPackaged"/>-->
      <!-- Deploy contents to target org -->
      <!--<antcall target="deployPackaged"/>-->
      <antcall target="deployUnpackaged0"/>
      <antcall target="deployUnpackaged1"/>
      <antcall target="deployUnpackaged2"/>
      <antcall target="deployUnpackaged3"/>
      <antcall target="deployUnpackaged4"/>
      <antcall target="deployUnpackaged5"/>
      <!-- Retrieve the contents of the target org for verification -->
      <antcall target="retrieveToUnpackaged0"/>
      <antcall target="retrieveToUnpackaged1"/>
      <antcall target="retrieveToUnpackaged2"/>
      <antcall target="retrieveToUnpackaged3"/>
      <antcall target="retrieveToUnpackaged4"/>
      <antcall target="retrieveToUnpackaged5"/>
      <!--<antcall target="retrieveToPackaged"/>-->
    </target>

    <!-- Clean directory structure -->
    <target name="CleanAll">
      <!-- Delete directory structure -->
      <delete dir="${sf.servername.from}/unpackaged0"/>
      <delete dir="${sf.servername.from}/unpackaged1"/>
      <delete dir="${sf.servername.from}/unpackaged2"/>
      <delete dir="${sf.servername.from}/unpackaged3"/>
      <delete dir="${sf.servername.from}/unpackaged4"/>
      <delete dir="${sf.servername.from}/unpackaged5"/>
      <delete dir="${sf.servername.from}"/>
      <delete dir="${sf.servername.to}/unpackaged0"/>
      <delete dir="${sf.servername.to}/unpackaged1"/>
      <delete dir="${sf.servername.to}/unpackaged2"/>
      <delete dir="${sf.servername.to}/unpackaged3"/>
      <delete dir="${sf.servername.to}/unpackaged4"/>
      <delete dir="${sf.servername.to}/unpackaged5"/>
      <delete dir="${sf.servername.to}"/>

      <!-- Create directory structure -->
      <mkdir dir="${sf.servername.from}/unpackaged0"/>
      <mkdir dir="${sf.servername.from}/unpackaged1"/>
      <mkdir dir="${sf.servername.from}/unpackaged2"/>
      <mkdir dir="${sf.servername.from}/unpackaged3"/>
      <mkdir dir="${sf.servername.from}/unpackaged4"/>
      <mkdir dir="${sf.servername.from}/unpackaged5"/>
      <mkdir dir="${sf.servername.from}"/>
      <mkdir dir="${sf.servername.to}/unpackaged0"/>
      <mkdir dir="${sf.servername.to}/unpackaged1"/>
      <mkdir dir="${sf.servername.to}/unpackaged2"/>
      <mkdir dir="${sf.servername.to}/unpackaged3"/>
      <mkdir dir="${sf.servername.to}/unpackaged4"/>
      <mkdir dir="${sf.servername.to}/unpackaged5"/>
      <mkdir dir="${sf.servername.to}"/>
    </target>

    <!-- Retrieve From target -->
    <target name="RetrieveFrom">
      <!-- Retrieve the contents of the source org -->
      <antcall target="retrieveFromUnpackaged"/>
      <antcall target="retrieveFromPackaged"/>
    </target>

    <!-- Retrieve To target -->
    <target name="RetrieveTo">
      <!-- Retrieve the contents of the target org for verification -->
      <antcall target="retrieveToUnpackaged"/>
      <antcall target="retrieveToPackaged"/>
    </target>

    <!-- Retrieve unpackaged metadata from source org -->
    <target name="retrieveFromUnpackaged0">
      <sf:retrieve username="${sf.username.from}" password="${sf.password.from}" serverurl="${sf.serverurl.from}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.from}/unpackaged0" unpackaged="package0.xml"/>
    </target>

    <target name="retrieveFromUnpackaged1">
      <sf:retrieve username="${sf.username.from}" password="${sf.password.from}" serverurl="${sf.serverurl.from}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.from}/unpackaged1" unpackaged="package1.xml"/>
    </target>

    <target name="retrieveFromUnpackaged2">
      <sf:retrieve username="${sf.username.from}" password="${sf.password.from}" serverurl="${sf.serverurl.from}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.from}/unpackaged2" unpackaged="package2.xml"/>
    </target>

    <target name="retrieveFromUnpackaged3">
      <sf:retrieve username="${sf.username.from}" password="${sf.password.from}" serverurl="${sf.serverurl.from}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.from}/unpackaged3" unpackaged="package3.xml"/>
    </target>

    <target name="retrieveFromUnpackaged4">
      <sf:retrieve username="${sf.username.from}" password="${sf.password.from}" serverurl="${sf.serverurl.from}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.from}/unpackaged4" unpackaged="package4.xml"/>
    </target>

    <target name="retrieveFromUnpackaged5">
      <sf:retrieve username="${sf.username.from}" password="${sf.password.from}" serverurl="${sf.serverurl.from}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.from}/unpackaged5" unpackaged="package5.xml"/>
    </target>

    <!-- Retrieve packaged metadata from source org -->
    <target name="retrieveFromPackaged">
      <sf:retrieve username="${sf.username.from}" password="${sf.password.from}" serverurl="${sf.serverurl.from}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.from}" packageNames="${sf.pkgName}" singlePackage="false" />
    </target>

    <!-- Deploy unpackaged metadata to the target org -->
    <target name="deployUnpackaged0">
      <sf:deploy username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" deployRoot="${sf.servername.from}/unpackaged0" rollbackOnError="true"/>
    </target>

    <target name="deployUnpackaged1">
      <sf:deploy username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" deployRoot="${sf.servername.from}/unpackaged1" rollbackOnError="true"/>
    </target>

    <target name="deployUnpackaged2">
      <sf:deploy username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" deployRoot="${sf.servername.from}/unpackaged2" rollbackOnError="true"/>
    </target>

    <target name="deployUnpackaged3">
      <sf:deploy username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" deployRoot="${sf.servername.from}/unpackaged3" rollbackOnError="true"/>
    </target>

    <target name="deployUnpackaged4">
      <sf:deploy username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" deployRoot="${sf.servername.from}/unpackaged4" rollbackOnError="true"/>
    </target>

    <target name="deployUnpackaged5">
      <sf:deploy username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" deployRoot="${sf.servername.from}/unpackaged5" rollbackOnError="true"/>
    </target>

    <!-- Deploy packaged metadata to the target org -->
    <target name="deployPackaged">
      <sf:deploy username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" deployRoot="${sf.servername.from}/${sf.pkgName}" rollbackOnError="true"/>
    </target>

    <!-- Retrieve unpackaged metadata from target org -->
    <target name="retrieveToUnpackaged0">
      <sf:retrieve username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.to}/unpackaged0" unpackaged="package0.xml"/>
    </target>

    <target name="retrieveToUnpackaged1">
      <sf:retrieve username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.to}/unpackaged1" unpackaged="package1.xml"/>
    </target>

    <target name="retrieveToUnpackaged2">
      <sf:retrieve username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.to}/unpackaged2" unpackaged="package2.xml"/>
    </target>

    <target name="retrieveToUnpackaged3">
      <sf:retrieve username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.to}/unpackaged3" unpackaged="package3.xml"/>
    </target>

    <target name="retrieveToUnpackaged4">
      <sf:retrieve username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.to}/unpackaged4" unpackaged="package4.xml"/>
    </target>

    <target name="retrieveToUnpackaged5">
      <sf:retrieve username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.to}/unpackaged5" unpackaged="package5.xml"/>
    </target>

    <!-- Retrieve packaged metadata from target org -->
    <target name="retrieveToPackaged">
      <sf:retrieve username="${sf.username.to}" password="${sf.password.to}" serverurl="${sf.serverurl.to}" maxPoll="${sf.maxPoll}" pollWaitMillis="${sf.pollWaitMillis}" retrieveTarget="${sf.servername.to}" packageNames="${sf.pkgName}" singlePackage="false" />
    </target>

	<macrodef name="describemetadata">
		<attribute name="username" default="${sf.username.from}"/>
		<attribute name="password" default="${sf.password.from}"/>
		<attribute name="serverurl" default="${sf.serverurl.from}"/>
		<attribute name="file"/>
		<attribute name="trace" default="false"/>
		<sequential>
			<sf:describeMetadata username="@{username}" password="@{password}" serverurl="@{serverurl}" resultFilePath="@{file}" trace="@{trace}"/>
		</sequential>
	</macrodef>
	
	<macrodef name="listmetadata">
		<attribute name="username" default="${sf.username.from}"/>
		<attribute name="password" default="${sf.password.from}"/>
		<attribute name="serverurl" default="${sf.serverurl.from}"/>
		<attribute name="type"/>
		<attribute name="folder" default=""/>
		<attribute name="file"/>
		<attribute name="append" default="false"/>
		<attribute name="apiVersion" default="32.0"/>
		<attribute name="trace" default="false"/>
		<sequential>
			<local name="folder.info"/>
			<condition property="folder.info" value="" else=" in folder @{folder}">
				<equals arg1="@{folder}" arg2=""/>
			</condition>
			<echo>Retrieving @{type} metadata${folder.info}</echo>
			<local name="sf.meta.data.temp.file"/>
			<tempfile destdir="${temp.dir}" property="sf.meta.data.temp.file" deleteonexit="false" prefix="@{type}.listmetadata" suffix=".temp"/>
			<taskdef resource="net/sf/antcontrib/antlib.xml"> 
				<classpath> 
					<pathelement location="lib/antcontrib.jar" /> 
				</classpath> 
			</taskdef>
			<switch value="@{type}">
			  <case value="Certificate">
				<echo>Skipping @{type}</echo>
			  </case>
			  <case value="NamedCredential">
				<echo>Skipping @{type}</echo>
			  </case>
			  <case value="GlobalPicklist">
				<echo>Skipping @{type}</echo>
			  </case>
			  <case value="CustomFeedFilter">
				<echo>Skipping @{type}</echo>
			  </case>
			  <case value="EmbeddedServiceConfig">
				<echo>Skipping @{type}</echo>
			  </case>
			  <case value="FlowDefinition">
				<echo>Skipping @{type}</echo>
			  </case>
			  <case value="MatchingRules">
				<echo>Skipping @{type}</echo>
			  </case>
			  <case value="MatchingRule">
				<echo>Skipping @{type}</echo>
			  </case>
			  <default>
					<retry retrycount="3">
						<sf:listMetadata 
							username="@{username}"
							password="@{password}"
							serverurl="@{serverurl}"
							metadataType="@{type}"
							folder="@{folder}"
							resultFilePath="${sf.meta.data.temp.file}"
							trace="@{trace}"
							apiVersion="@{apiVersion}"
							/>
					</retry>
				</default>
				</switch>

			<local name="type"/>
			<property name="type" value="@{type}"/>
			<concat destfile="@{file}" append="@{append}">
				<fileset file="${sf.meta.data.temp.file}"/>
				<filterchain>
					<prefixlines prefix="@@LINE_BREAK@@"/>
					<striplinebreaks/>
					<tokenfilter>
						<replaceregex pattern="@@LINE_BREAK@@(\*+)@@LINE_BREAK@@(\*+)" replace="@@LINE_BREAK@@\1${line.separator}@@LINE_BREAK@@\2" flags="g"/>
						<replacestring from="**@@LINE_BREAK@@**" to="**${line.separator}**"/>
					</tokenfilter>
					<sortfilter/>
					<tokenfilter>
						<replacestring from="@@LINE_BREAK@@" to="${line.separator}"/>
					</tokenfilter>
					<linecontainsregexp negate="true">
						<regexp pattern="^\s*$"/>
					</linecontainsregexp>
				</filterchain>
			</concat>
		</sequential>
	</macrodef>

	<macrodef name="login">
		<attribute name="username" default="${sf.username.from}"/>
		<attribute name="password" default="${sf.password.from}"/>
		<attribute name="serverurl" default="${sf.serverurl.from}"/>
		<sequential>
			<exec executable="lib/force" failonerror="true">
				<arg value="login"/>
				<arg value="-u"/>
				<arg value="@{username}"/>
				<arg value="-p"/>
				<arg value="@{password}"/>
				<arg value="-i"/>
				<arg value="@{serverurl}"/>
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="soql">
		<attribute name="username" default="${sf.username.from}"/>
		<attribute name="password" default="${sf.password.from}"/>
		<attribute name="serverurl" default="${sf.serverurl.from}"/>
		<attribute name="query"/>
		<attribute name="outputproperty"/>
		<sequential>
			<login username="@{username}" password="@{password}"/>
			<exec executable="lib/force" failonerror="true" outputproperty="@{outputproperty}">
				<arg value="query"/>
				<arg value="@{query}"/>
				<redirector>
					<outputfilterchain>
						<headfilter lines="-1" skip="2"/>
						<tailfilter lines="-1" skip="1"/>
						<trim/>
					</outputfilterchain>
				</redirector>
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="retrieveallmetadata">
		<attribute name="dir" default="${sf.working.dir}"/>
		<attribute name="alltypes" default="false"/>
		<sequential>
			<local name="describe.file"/>
			<tempfile destdir="${temp.dir}" property="describe.file" prefix="describe." suffix=".metadata" deleteonexit="false"/>
			<describemetadata file="${describe.file}"/>
			<local name="sf.describe.metadata"/>
			<loadfile srcfile="${describe.file}" property="sf.describe.metadata"/>
			<local name="dir"/>
			<property name="dir" value="@{dir}"/>
			<script language="javascript"> <![CDATA[
				var describeInfo = project.getProperty("sf.describe.metadata");
				var sections = describeInfo.match(/\*+[^\*]+\*+/gm);
				var dir = project.getProperty("dir");

				for(var i=0; i<sections.length; i++) {
					var props = sections[i].replace(/\*\*+/g, '').replace(/^([^\:]+)\:\s*/g, '$1=');
					var metadatatask = project.createTask("retrievemetadatawrapper");
					metadatatask.setDynamicAttribute("props", props);
					metadatatask.setDynamicAttribute("dir", dir);
					metadatatask.setDynamicAttribute("alltypes", "@{alltypes}");
					metadatatask.perform();
				}
			]]></script>
		</sequential>
	</macrodef>

	<macrodef name="retrievemetadatawrapper">
		<attribute name="props"/>
		<attribute name="dir" default="${sf.working.dir}"/>
		<attribute name="typefilename" default="type.metadata"/>
		<attribute name="subtypefilename" default="subtype.metadata"/>
		<attribute name="alltypes" default="false"/>
		<sequential>
			<local name="props"/>
			<property name="props" value="@{props}"/>
			<local name="XMLName"/>
			<local name="DirName"/>
			<local name="Suffix"/>
			<local name="HasMetaFile"/>
			<local name="InFolder"/>
			<local name="ChildObjects"/>
			<loadproperties> 
				<propertyresource name="props"/>
			</loadproperties>
			<local name="dir"/>
			<property name="dir" value="@{dir}"/>
			<script language="javascript"> <![CDATA[
				var dir = project.getProperty("dir") + project.getProperty("file.separator") + project.getProperty("DirName");
				var dirFile = new java.io.File(dir);

				if("@{alltypes}"=="true") {
					var mkdirtask = project.createTask("mkdir");
					mkdirtask.setDir(dirFile);
					mkdirtask.perform();
				}

				if(dirFile.exists() && dirFile.isDirectory()) {
					var retrievemetadatatask = project.createTask("retrievemetadata");
					retrievemetadatatask.setDynamicAttribute("dir", dir);
					retrievemetadatatask.setDynamicAttribute("type", project.getProperty("XMLName"));
					retrievemetadatatask.setDynamicAttribute("infolders", project.getProperty("InFolder"));
					retrievemetadatatask.setDynamicAttribute("subtypes", project.getProperty("ChildObjects"));
					retrievemetadatatask.setDynamicAttribute("typefilename", "@{typefilename}");
					retrievemetadatatask.setDynamicAttribute("subtypefilename", "@{subtypefilename}");
					retrievemetadatatask.perform();
				}
			]]></script>
		</sequential>
	</macrodef>

	<macrodef name="retrievemetadata">
		<attribute name="dir"/>
		<attribute name="type"/>
		<attribute name="infolders" default="false"/>
		<attribute name="subtypes" default=""/>
		<attribute name="typefilename" default="type.metadata"/>
		<attribute name="subtypefilename" default="subtype.metadata"/>
		<sequential>
			<local name="typefile"/>
			<property name="typefile" value="@{dir}${file.separator}@{typefilename}"/>
			<local name="subtypefile"/>
			<property name="subtypefile" value="@{dir}${file.separator}@{subtypefilename}"/>
			<listmetadata type="@{type}" file="${typefile}"/>
			<script language="javascript"> <![CDATA[
				var ls = project.getProperty("line.separator");
				var subtypesprop = "@{subtypes}";
				var typefile = project.getProperty("typefile");
				var subtypefile = project.getProperty("subtypefile");
				var subtypes = subtypesprop.split('\,');
				for(var j=0; j<subtypes.length && subtypes[j]!='' && subtypes[j]!='null' && subtypes[j]!='WorkflowFlowAction' && subtypes[j]!='RecordType'; j++) {
					var subtype = subtypes[j];
					var listmetadatatask = project.createTask("listmetadata");
					listmetadatatask.setDynamicAttribute("type", subtype);
					listmetadatatask.setDynamicAttribute("file", subtypefile);
					if(j>0) {
						listmetadatatask.setDynamicAttribute("append", "true");
					}
					listmetadatatask.perform();
					var echo = project.createTask("echo");
					echo.setAppend(true);
					echo.setFile(new java.io.File(subtypefile));
					echo.setMessage("TYPE: " + subtype + ls);
					echo.perform();
				}
				var infolder = "@{infolders}";
				var type = "@{type}";
				if(infolder.toLowerCase() == 'true') {
					var getfoldermetadatatask = project.createTask("getfoldersmetadata");
					getfoldermetadatatask.setDynamicAttribute("type", type);
					getfoldermetadatatask.setDynamicAttribute("file", typefile);
					getfoldermetadatatask.perform();
				}
				var echo = project.createTask("echo");
				echo.setAppend(true);
				echo.setFile(new java.io.File(typefile));
				echo.setMessage("TYPE: " + type + ls);
				echo.perform();
			]]></script>
			<replaceregexp match="(\*)(TYPE:)" replace="\1${line.separator}\2" flags="g">
				<fileset file="${typefile}"/>
				<fileset file="${subtypefile}"/>
			</replaceregexp>
		</sequential>
	</macrodef>

	<macrodef name="getfoldersmetadata">
		<attribute name="type"/>
		<attribute name="file"/>
		<sequential>
			<local name="folders"/>
			<soql query="SELECT DeveloperName FROM Folder WHERE Type='@{type}' AND DeveloperName&lt;&gt;''" outputproperty="folders"/>
			<local name="type"/>
			<property name="type" value="@{type}"/>
			<local name="file"/>
			<property name="file" value="@{file}"/>
			<script language="javascript"> <![CDATA[
				var foldersString = project.getProperty("folders");
				var type = project.getProperty("type");
				var file = project.getProperty("file");
				var ls = project.getProperty("line.separator");
				if("Report"==type) {
					foldersString = "unfiled$public" + ls + foldersString;
				}
				var folders = foldersString.split(ls);
				for(var k = 0; k < folders.length && folders[k]!=""; k++) {
					var listmetadatatask = project.createTask("listmetadata");
					listmetadatatask.setDynamicAttribute("type", type);
					listmetadatatask.setDynamicAttribute("file", file);
					listmetadatatask.setDynamicAttribute("folder", folders[k]);
					if(k>0) {
						listmetadatatask.setDynamicAttribute("append", "true");
					}
					listmetadatatask.perform();
				}
			]]></script>
		</sequential>
	</macrodef>
	
	<target name="retrieve.all.metadata">
		<property name="temp.dir" value="temp"/>
		<mkdir dir="${temp.dir}"/>
		<retrieveallmetadata alltypes="true" dir="${temp.dir}"/>
	</target>

	<target name="retrieve.all.content" depends="retrieve.all.metadata">
		<property name="temp.dir" value="temp"/>
		<property name="package.header" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;${line.separator}&lt;Package xmlns=&quot;http://soap.sforce.com/2006/04/metadata&quot;&gt;"/>
		<property name="package.footer" value="&lt;version&gt;30.0&lt;/version&gt;${line.separator}&lt;/Package&gt;"/>
		<replaceregexp match="\*+[^\*]+Manageable State\:\s+installed[^\*]+\*+" replace="" flags="mg">
			<fileset dir="${temp.dir}" includes="**${file.separator}type.metadata,**${file.separator}subtype.metadata"/>
		</replaceregexp>
		<tempfile property="all.package.xml" prefix="all.types.package." suffix=".xml" destdir="${temp.dir}" deleteonexit="true"/>
		<concat destfile="${all.package.xml}">
			<fileset dir="${temp.dir}" includes="**${file.separator}type.metadata,**${file.separator}subtype.metadata" excludes="installedPackages${file.separator}**,workflows${file.separator}**">
				<containsregexp expression="^FullName.+\/[^\/]+$"/>
			</fileset>
			<header filtering="no" trimleading="no">${package.header}${line.separator}  &lt;types&gt;${line.separator}</header>
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="^(FullName.+\/.+|TYPE:.+)$"/>
				</linecontainsregexp>
				<tokenfilter>
					<replaceregex pattern="FullName/Id:\s*(.+)\/.+$" replace="    &lt;members&gt;\1&lt;\/members&gt;"/>
					<replaceregex pattern="TYPE:\s*(.+)$" replace="    &lt;name&gt;\1&lt;\/name&gt;${line.separator}  &lt;\/types&gt;${line.separator}  &lt;types&gt;"/>
				</tokenfilter>
			</filterchain>
			<footer filtering="no" trimleading="no">  ${package.footer}</footer>
		</concat>
		<replaceregexp file="${all.package.xml}" match="\s*&lt;types&gt;(\s*&lt;version&gt;)" replace="\1" flags="m"/>
		<sf:retrieve username="${sf.username.from}" password="${sf.password.from}" serverurl="${sf.serverurl.from}" unpackaged="${all.package.xml}" retrieveTarget="${temp.dir}" unzip="true"/>
	</target>
	
	</project>
